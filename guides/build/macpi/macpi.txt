[b]Prerequisites to install Raspbian to a SD Card[/b]
- Raspberry Pi Model B or higher with at least 512 MB 
- SDHC Card with at least 16GB
  Should be compatible for the Raspberry Pi and class 10 for best results.
  I have used SanDisk SDSDU-016G-U46 Ultra SDHC Class 10.
- Network cable
  To connect from your computer via SSH to the Raspberry Pi.
  You can also use mouse/keyboard/display instead and forget the SSH stuff.
- Internet connection
  The Raspberry Pi should be connected to the internet. 
1. Download Raspian SD Card image from
https://www.raspberrypi.org/downloads/
and follow the given instructions located at 
https://www.raspberrypi.org/documentation/installation/installing-images/README.md
In the next few steps I'll show you this for GNU/Linux Debian. 
Feel free to add instructions for other systems here as well.
2. Format the SD Card with GParted
and get to know the location of your SD Card.
This is something like /dev/sdCHAR but you really need to be sure.
If you are not sure you may format your entire hard drive later.
3. Type into the terminal
[code]$ sudo dd if=path_to_your_raspbian.img of=/dev/sdCHAR bs=4m[/code]
and wait this can take a while up to 1/2 hour
4. Eject the SD Card
[code]$ sync[/code]
and put it into your Raspberry Pi.
5. Put the SD Card into Raspberry Pi, connect the Raspberry Pi with your Computer and boot
6. Find out the IP and connect via SSH to it. 
To find out the IP you also could put the SD Card into your computer, then edit /boot/cmdline.txt
[code]$ vi /boot/cmdline.txt[/code]
and add a
[code]ip=192.168.3.133[/code]
at the end of the line for example.
Then setup the ip on the computer to be 
192.168.3.2 with a 255.255.255.0 netmask.
Connect both with a cable, put the SD Card back into the MacPi and boot the MacPi.
SSH Server is already installed and activated on Raspbian.
The default user is "pi" and password "raspberry".
[code]$ ssh -l pi IP[/code]

[b]System update[/b]
[code]$ sudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade[/code]

[b]Mount an USB Stick[/b]
Prerequisites:
- USB Stick
- Tutorial done above
1. Get su
[code]$ sudo su[/code]
2. Put USB Stick into the Raspberry Pi and get the system name
[code]$ tail -f /var/log/messages[/code]
The part after sda: ... should give the name for me its sda1 which I'll use from now on
3. Format the USB Stick
[code]$ mkfs.ext4 /dev/sda1[/code]
4. Create a directory
[code]$ mkdir /media/usbstick[/code]
5. If sda1 is the name then mount it with
[code]$ mount /dev/sda1 /media/usbstick/[/code]
6. To automatically mount the drive at every start just get the UUID
[code]$ blkid /dev/sda1[/code]
7. And add the line "UUID=BF12-15E9 /media/usbstick ext4 defaults 0 2" to
[code]$ vi /etc/fstab[/code]
while using your own UUID I used here mine its BF12-15E9

[b]Put a swapfile onto the mounted USB Stick[/b]
Prerequisites:
- Tutorials done above
1. Get su
[code]$ sudo su[/code]
2. Do
[code]$ vi /etc/dphys-swapfile[/code]
and add
CONF_SWAPFILE=/media/usbstick/swap
CONF_SWAPSIZE=1536
to it
3. Do some magic
[code]$ dphys-swapfile swapoff
$ dd if=/dev/zero of=/media/usbstick/swap bs=1M count=1536
$ mkswap /media/usbstick/swap
$ dphys-swapfile setup
$ dphys-swapfile swapon[/code]
4. Check if its in there
[code]$ swapon -s[/code]

[b]Activate WLAN[/b]
Prerequisites:
- Tutorials done above
- WLAN Stick
  I have used EDIMAX EW-7811 Wifi Wireless Wlan USB dongle.
1. Get su
[code]$ sudo su[/code]
2. Put the WLAN Stick into the Raspberry Pi and then run
[code]$ dmesg[/code]
This should give a result like "usbcore: registered new interface driver rtl8192cu..." 
3. Check if the new network device wlan0 can be seen at
[code]$ ifconfig[/code]
4. Deactivate the energy save function of the EDIMAX driver
[code]$ vi /etc/modprobe.d/8192cu.conf[/code]
And add "options 8192cu rtw_power_mgnt=0 rtw_enusbss=0" to it.
5. Reboot
[code]$ reboot[/code]
6. Check if the energy save function of the EDIMAX driver was deactivated it should return 0
[code]$ cat /sys/module/8192cu/parameters/rtw_power_mgnt[/code] 
7. Now edit
[code]$ vi /etc/network/interfaces[/code]
Which should look like this at the beginning:
[code]# interfaces(5) file used by ifup(8) and ifdown(8)

# Please note that this file is written to be used with dhcpcd
# For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'

# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

auto lo
iface lo inet loopback

iface eth0 inet manual

allow-hotplug wlan0
iface wlan0 inet manual
    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

allow-hotplug wlan1
iface wlan1 inet manual
    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf[/code]
It depends on your WLAN settings but this works for me with WPA.
[code]# interfaces(5) file used by ifup(8) and ifdown(8)

# Please note that this file is written to be used with dhcpcd
# For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'

# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

auto lo
iface lo inet loopback

iface eth0 inet manual

allow-hotplug wlan0
iface wlan0 inet manual
    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

iface default inet dhcp[/code]

The file "/etc/wpa_supplicant/wpa_supplicant.conf" where you then just have to configure YOURSSID and YOURPSK looks like this:

[code]country=GB
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
[/code]

turn it into something like

[code]country=DE
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
    ssid="YOURSSID"
    proto=RSN
    key_mgmt=WPA-PSK
    pairwise=CCMP TKIP
    group=CCMP TKIP
    psk="YOURPSK"
}[/code]

8. Finally we need a fix so that the MacPi reconnects to a Wi-Fi network in case the connection was lost. For this you either can use a short script

[code]#!/bin/bash                                  
                                               
TESTIP=192.168.2.1                           
                                               
ping -c4 ${TESTIP} > /dev/null               
                                               
if [ $? != 0 ]                               
then                                         
    logger -t $0 "WiFi is probably down, restarting"
    ifdown --force wlan0                     
    ifup wlan0                               
else                                        
    logger -t $0 "WiFi is probably up."           
fi [/code]

and create a new cronjob

[code]	
*/5 * * * * root /usr/local/bin/testwifi.sh
[/code]

[b]Expand the partition size to use the full 16GB of the SD Card[/b]
1. Get su
[code]$ sudo su[/code]
2. Type in 
[code]$ df -h[/code]
and look for the filesystem where its mounted at /boot for me its [code]"/dev/mmcblk0p1"[/code]
3. Type in 
[code]$ fdisk -u -c /dev/mmcblk0[/code]
After this you land in the environment of fdisk
4. Inside fdisk type in
[code]$ p ENTER[/code]
Don't write ENTER but press ENTER on your keyboard.
You'll see something then.
Copy that you'll need it later.
For me its
[code]Device Boot      Start         End      Blocks   Id  System
/dev/mmcblk0p1            8192      122879       57344    c  W95 FAT32 (LBA)
/dev/mmcblk0p2          122880     5785599     2831360   83  Linux[/code]
5. Inside fdisk delete the partitions that are not boot. In my case its partition 2. 
[code]$ d 
$ 2[/code]
6. Now create a new partition
[code]$ n 
$ p 
$ 2[/code]
fdisk wants then the start of the 2nd partition its the value that you have copy/pasted and in my case 122880
Then fdisk wants the last sector choose here the value that is shown at "default".
7. Save the new table
[code]$ w[/code]
8. Reboot the system
[code]$ reboot[/code]
9. Get su
[code]$ sudo su[/code]
10. Resize the partition
[code]$ resize2fs /dev/mmcblk0p2[/code]
11. Check the result 
[code]$ df -h[/code]
12. Exit su
[code]$ exit[/code]

[b]Setup a Machinecoin supernode[/b]
1. Get su
[code]$ sudo su[/code]
2. Install Libs
[code]$ apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libboost-all-dev[/code]

[code]$ apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler[/code]

[code]$ apt-get install libminiupnpc-dev libqrencode-dev[/code]

3. Exit su
[code]$ exit[/code]

4. Clone the repository
[code]cd ~ && git clone https://github.com/machinecoin-project/machinecoin-core && cd machinecoin-core/[/code]

5. Compile db4.8
[code]
# Tell your system where to find db4.8
$ MACHINECOIN_ROOT=$(pwd)

# Pick some path to install BDB to, here we create a directory within the machinecoin directory
$ BDB_PREFIX="${MACHINECOIN_ROOT}/db4"
$ mkdir -p $BDB_PREFIX

# Fetch the source and verify that it is not tampered with
$ wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'
$ echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256sum -c
# -> db-4.8.30.NC.tar.gz: OK
$ tar -xzvf db-4.8.30.NC.tar.gz

# Build the library and install to our prefix
$ cd db-4.8.30.NC/build_unix/
#  Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime
$ ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX
$ make install[/code]

6. Compile Machinecoin
[code]# Configure Machinecoin Core to use our own-built instance of BDB
$ cd $MACHINECOIN_ROOT
$ ./configure --with-gui=qt5 LDFLAGS="-L${BDB_PREFIX}/lib/" CPPFLAGS="-I${BDB_PREFIX}/include/"
[/code]

# Compile
[code]$ make[/code]

4. Test the Machinecoin-Daemon
[code]$ ./machinecoind[/code]

5. Create a config-file, change <rpcusername> and <rpcpassword>, save the config-file 
[code]rpcuser=<rpcusername>
rpcpassword=<rpcpassword>
rpcport=40332
server=1
listen=1
daemon=1
gen=0
rpcallowip=127.0.0.1
disablewallet=0
maxconnections=8
bloomfilters=1 
maxsendbuffer=256000 
maxreceivebuffer=256000[/code]

6. Forward port 40333 in your router to your Raspberry Pi and may setup a dyndns for your router. 

[b]Additional notes I[/b]
If the Raspberry Pi is reachable from outside change the default password for the user "pi". 
1. Just type in
[code]passwd[/code]

[b]Additional notes II[/b]
After I did the setup of the Raspberry Pi I saw that there is a Raspberry Pi config program included in Raspian that makes some stuff easier.
1. Get su
[code]$ sudo su[/code]
2. Call the config program
[code]$ raspi-config[/code]

[b]Additional notes III[/b]
It could be useful to add an autostart for the Machinecoin-Daemon.
1. Add a crontab for autostart
[code]crontab -e[/code]
Insert the following line
[code]@reboot cd /home/pi/Machinecoin/src && machinecoind[/code]

[b]Additional notes IV[/b]
It can also be useful to install nginx and serve the Machinecoin Community Kit, Machinecoin Paperwallet, Backup of the Machinecoin Blockchain and Backup of the Machinecoin Source Code
1. Install nginx
[code]$ sudo apt-get install nginx
sudo sed -i "s/worker_processes 4;/worker_processes 1;/g" /etc/nginx/nginx.conf
sudo sed -i "s/worker_connections 768;/worker_connections 128;/g" /etc/nginx/nginx.conf
sudo /etc/init.d/nginx start[/code]
2. Enable directory listing
[code]$ vi /etc/nginx/sites-enabled/default[/code]
Add "autoindex on;" to "location /"
3. Restart nginx
[code]$ /etc/init.d/nginx restart[/code]
4. Copy the Machinecoin Community Kit, Machinecoin Paperwallet, Backup of the Machinecoin Blockchain and Backup of the Machinecoin Source Code to /usr/share/nginx/www/
5. Tell the router to forward the port(s) 80,443 to your Raspberry Pi
6. Setup Dyndns for the router or directly via the Raspberry Pi

[b]Additional notes V[/b]
If your ip changes every 24 hours and your router do not support a functionality to use a DynDNS-service you may can do the following trick:
1. Get a free subdomain with DynDNS at https://www.noip.com/sign-up
2. Download, install and start the Dynamic DNS Update Client for GNU/Linux
[code]cd /home/pi 
mkdir DynDNS
cd DynDNS
wget http://www.noip.com/client/linux/noip-duc-linux.tar.gz
tar xf noip-duc-linux.tar.gz
rm noip-duc-linux.tar.gz
mv noip-* noip
cd noip
sudo make install
sudo noip2[/code]
3. Add a crontab for autostart
[code]crontab -e[/code]
Insert the following line
[code]@reboot cd /home/pi/DynDNS/noip && sudo noip2[/code]
